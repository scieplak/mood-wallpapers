{"version":3,"sources":["assets/fonts/red-hat-display.woff","assets/fonts/reem-kufi.woff","reducers/index.js","actions/index.js","store/index.js","theme/GlobalStyle.js","theme/mainTheme.js","components/atoms/NavButton/NavButton.js","components/organisms/Header/Header.js","utils/helpers.js","components/templates/MainTemplate.js","components/atoms/IcoButton/IcoButton.js","components/molecules/Card/Card.js","components/templates/CardGridTemplate.js","views/Wallpapers.js","views/Favorites.js","views/Root.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","wallpapers","favorites","JSON","parse","localStorage","getItem","currentKeywords","rootReducer","state","type","payload","data","keywords","newFavorite","filter","item","id","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","GlobalStyle","createGlobalStyle","RedHatDisplay","ReemKufi","theme","colors","white","mainPurple","textGrey","fontFamily","primary","heading","Button","styled","button","StyledText","span","NavButton","Icon","icon","text","props","StyledHeader","header","TopBar","div","StyledNav","nav","Header","exact","as","NavLink","to","activeClassName","ImageAlt","FavoriteBorder","getDayPart","Date","currentHour","getHours","getSeason","currentMonth","getMonth","connect","dispatch","fetchWallpapers","axios","get","params","client_id","count","query","join","transformResponse","defaults","concat","map","urls","user","imageUrl","regular","fullsizeUrl","raw","autor","name","tags","then","catch","err","fetchItems","children","currentDate","useEffect","IcoButton","Wrapper","css","ButtonWrapper","BottomBar","Tags","Card","card","addFavorite","removeFavorite","location","useLocation","isFavorite","some","pathname","Fullscreen","onClick","open","FilledHeart","Heart","confirm","defaultProps","prevLocalstorageState","setItem","stringify","addToFavorites","removeFromFavorites","section","CardGridTemplate","cards","key","Keywords","h1","Wallpapers","length","Favorites","App","basename","process","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.7b547bea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/red-hat-display.7eab74ec.woff\";","module.exports = __webpack_public_path__ + \"static/media/reem-kufi.20e4fd7e.woff\";","import { FETCH_SUCCESS, FETCH_FAILURE, ADD_FAVORITE, REMOVE_FAVORITE } from 'actions';\r\n\r\nconst initialState = {\r\n  wallpapers: [],\r\n  favorites: JSON.parse(localStorage.getItem('favorites')) || [],\r\n  currentKeywords: [],\r\n};\r\n\r\nconst rootReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case FETCH_SUCCESS: {\r\n      return { ...state, wallpapers: payload.data, currentKeywords: payload.keywords };\r\n    }\r\n    case FETCH_FAILURE: {\r\n      return state;\r\n    }\r\n    case ADD_FAVORITE:\r\n      return {\r\n        ...state,\r\n        favorites: [...state.favorites, payload.newFavorite],\r\n      };\r\n    case REMOVE_FAVORITE:\r\n      return {\r\n        ...state,\r\n        favorites: state.favorites.filter((item) => item.id !== payload.id),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import axios from 'axios';\r\n\r\nexport const FETCH_REQUEST = 'FETCH_REQUEST';\r\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\r\nexport const FETCH_FAILURE = 'FETCH_FAILURE';\r\nexport const ADD_FAVORITE = 'ADD_FAVORITE';\r\nexport const REMOVE_FAVORITE = 'REMOVE_FAVORITE';\r\n\r\nexport const addFavorite = (newFavorite) => {\r\n  const prevLocalstorageState = JSON.parse(localStorage.getItem('favorites')) || [];\r\n  localStorage.setItem('favorites', JSON.stringify([...prevLocalstorageState, newFavorite]));\r\n  return {\r\n    type: 'ADD_FAVORITE',\r\n    payload: { newFavorite },\r\n  };\r\n};\r\n\r\nexport const removeFavorite = (id) => {\r\n  const prevLocalstorageState = JSON.parse(localStorage.getItem('favorites')) || [];\r\n  localStorage.setItem(\r\n    'favorites',\r\n    JSON.stringify(prevLocalstorageState.filter((item) => item.id !== id)),\r\n  );\r\n\r\n  return {\r\n    type: 'REMOVE_FAVORITE',\r\n    payload: {\r\n      id,\r\n    },\r\n  };\r\n};\r\n\r\nexport const fetchItems = (keywords) => (dispatch) => {\r\n  dispatch({ type: FETCH_REQUEST });\r\n  return axios\r\n    .get('https://api.unsplash.com/photos/random/', {\r\n      params: {\r\n        client_id: 'IAZAW_X0oAiauBtvVa5VEhYiCgSlcrfUYeXWaOIeaKs',\r\n        count: 9,\r\n        query: keywords.join('-'),\r\n      },\r\n      transformResponse: axios.defaults.transformResponse.concat((data) =>\r\n        data.map(({ id, urls, user }) => ({\r\n          id,\r\n          imageUrl: urls.regular,\r\n          fullsizeUrl: urls.raw,\r\n          autor: user.name,\r\n          tags: keywords,\r\n        })),\r\n      ),\r\n    })\r\n    .then(({ data }) => {\r\n      dispatch({\r\n        type: FETCH_SUCCESS,\r\n        payload: { data, keywords },\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      throw (err, dispatch({ type: FETCH_FAILURE }));\r\n    });\r\n};\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport rootReducer from 'reducers';\r\nimport thunk from 'redux-thunk';\r\n/* eslint-disable no-underscore-dangle */\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n/* eslint-enable */\r\nexport default store;\r\n","import { createGlobalStyle } from 'styled-components';\r\nimport RedHatDisplay from 'assets/fonts/red-hat-display.woff';\r\nimport ReemKufi from 'assets/fonts/reem-kufi.woff';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n  @font-face {\r\n    font-family: 'Red Hat Display';\r\n    src: local('Red Hat Display'),\r\n    url(${RedHatDisplay}) format('woff');\r\n    font-weight: 300;\r\n    font-style: normal;\r\n  }\r\n\r\n  @font-face {\r\n    font-family: 'Reem Kufi';\r\n    src: local('Reem Kufi'),\r\n    url(${ReemKufi}) format('woff');\r\n    font-weight: 300;\r\n    font-style: normal;\r\n  }\r\n\r\n  *, *::before, *::after {\r\n    box-sizing: border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  html {\r\n    font-size: 62.5%;\r\n    overflow-y: scroll;\r\n  }\r\n\r\n  body {\r\n    font-family: 'Red Hat Display', sans-serif;\r\n    font-size: 1.6rem;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","const theme = {\r\n  colors: {\r\n    white: '#FFFFFF',\r\n    mainPurple: '#4F23FF',\r\n    textGrey: '#6D6D6D',\r\n  },\r\n  fontFamily: {\r\n    primary: `'Red Hat Display', sans-serif`,\r\n    heading: `'Reem Kufi', sans-serif`,\r\n  },\r\n};\r\n\r\nexport default theme;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  text-decoration: none;\r\n  text-align: center;\r\n  background-color: ${({ theme }) => theme.colors.white};\r\n  border: none;\r\n  color: ${({ theme }) => theme.colors.textGrey};\r\n  width: 120px;\r\n  height: 80px;\r\n  cursor: pointer;\r\n\r\n  &.active {\r\n    color: ${({ theme }) => theme.colors.mainPurple};\r\n  }\r\n\r\n  svg {\r\n    width: 60px;\r\n  }\r\n`;\r\n\r\nconst StyledText = styled.span`\r\n  text-transform: uppercase;\r\n  letter-spacing: 1px;\r\n`;\r\n\r\nconst NavButton = ({ icon: Icon, text, ...props }) => (\r\n  <Button {...props}>\r\n    <Icon />\r\n    <StyledText>{text}</StyledText>\r\n  </Button>\r\n);\r\n\r\nNavButton.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  icon: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.node, PropTypes.object])\r\n    .isRequired,\r\n};\r\n\r\nexport default NavButton;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\nimport NavButton from 'components/atoms/NavButton/NavButton';\r\nimport { ImageAlt } from '@styled-icons/boxicons-regular/ImageAlt';\r\nimport { FavoriteBorder } from '@styled-icons/material/FavoriteBorder';\r\n\r\nconst StyledHeader = styled.header`\r\n  height: 130px;\r\n  box-shadow: 0px 6px 25px 0px #000000;\r\n`;\r\n\r\nconst TopBar = styled.div`\r\n  height: 40px;\r\n  line-height: 38px;\r\n  padding: 2px;\r\n  text-align: center;\r\n  font-size: 28px;\r\n  font-family: ${({ theme }) => theme.fontFamily.heading};\r\n  color: ${({ theme }) => theme.colors.white};\r\n  background-color: ${({ theme }) => theme.colors.mainPurple};\r\n`;\r\n\r\nconst StyledNav = styled.nav`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  max-width: 280px;\r\n  margin: 0 auto;\r\n  padding: 5px 0;\r\n`;\r\n\r\nconst Header = () => (\r\n  <StyledHeader>\r\n    <TopBar>Mood Wallpapers</TopBar>\r\n    <StyledNav>\r\n      <NavButton exact as={NavLink} to=\"/\" text=\"IMAGES\" activeClassName=\"active\" icon={ImageAlt} />\r\n      <NavButton\r\n        as={NavLink}\r\n        to=\"/favorites\"\r\n        text=\"FAVORITES\"\r\n        activeClassName=\"active\"\r\n        icon={FavoriteBorder}\r\n      />\r\n    </StyledNav>\r\n  </StyledHeader>\r\n);\r\n\r\nexport default Header;\r\n","export const getDayPart = (Date) => {\r\n  const currentHour = Date.getHours();\r\n  if (currentHour >= 5 && currentHour < 12) return 'morning';\r\n  if (currentHour >= 12 && currentHour < 18) return 'afternoon';\r\n  if (currentHour >= 18 && currentHour < 21) return 'evening';\r\n  return 'night';\r\n};\r\n\r\nexport const getSeason = (Date) => {\r\n  const currentMonth = Date.getMonth();\r\n\r\n  if (currentMonth >= 3 && currentMonth < 6) return 'spring';\r\n  if (currentMonth >= 6 && currentMonth < 8) return 'summer';\r\n  if (currentMonth >= 8 && currentMonth < 11) return 'fall';\r\n\r\n  return 'winter';\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GlobalStyle from 'theme/GlobalStyle';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport theme from 'theme/mainTheme';\r\nimport Header from 'components/organisms/Header/Header';\r\nimport { connect } from 'react-redux';\r\nimport { fetchItems } from 'actions';\r\nimport { getDayPart, getSeason } from 'utils/helpers';\r\n\r\nfunction MainTemplate({ children, fetchWallpapers }) {\r\n  const currentDate = new Date();\r\n  const keywords = [getDayPart(currentDate), getSeason(currentDate), 'nature'];\r\n\r\n  useEffect(() => {\r\n    fetchWallpapers(keywords);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <GlobalStyle />\r\n      <ThemeProvider theme={theme}>\r\n        <>\r\n          <Header />\r\n          {children}\r\n        </>\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nMainTemplate.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n  fetchWallpapers: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchWallpapers: (keywords) => dispatch(fetchItems(keywords)),\r\n});\r\nexport default connect(null, mapDispatchToProps)(MainTemplate);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  border: none;\r\n  border-radius: 13px;\r\n  color: ${({ theme }) => theme.colors.white};\r\n  width: 41px;\r\n  height: 41px;\r\n  transition: transform 0.3s ease-out;\r\n  padding: 4px;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n\r\nconst IcoButton = ({ icon: Icon, ...props }) => (\r\n  <Button {...props}>\r\n    <Icon />\r\n  </Button>\r\n);\r\n\r\nIcoButton.propTypes = {\r\n  icon: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.node, PropTypes.object])\r\n    .isRequired,\r\n};\r\n\r\nexport default IcoButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { css } from 'styled-components';\r\nimport { useLocation } from 'react-router-dom';\r\nimport IcoButton from 'components/atoms/IcoButton/IcoButton';\r\nimport { Heart } from '@styled-icons/boxicons-regular/Heart';\r\nimport { Heart as FilledHeart } from '@styled-icons/boxicons-solid/Heart';\r\nimport { Fullscreen } from '@styled-icons/boxicons-regular/Fullscreen';\r\nimport { connect } from 'react-redux';\r\nimport { addFavorite as addToFavorites, removeFavorite as removeFromFavorites } from 'actions';\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  height: 280px;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n  background-image: ${({ imageUrl }) => imageUrl && css`url('${imageUrl}')`};\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  background-position: center center;\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  position: absolute;\r\n  display: flex;\r\n  width: 100px;\r\n  justify-content: space-around;\r\n  right: 10px;\r\n  top: 10px;\r\n`;\r\n\r\nconst BottomBar = styled.div`\r\n  position: absolute;\r\n  bottom: 0;\r\n  width: 100%;\r\n  height: 30px;\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  color: ${({ theme }) => theme.colors.white};\r\n  padding: 5px 10px;\r\n`;\r\n\r\nconst Tags = styled.div`\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  height: 30px;\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  color: ${({ theme }) => theme.colors.white};\r\n  border-radius: 10px;\r\n  padding: 5px 10px;\r\n`;\r\n\r\nconst Card = ({ card, favorites, addFavorite, removeFavorite }) => {\r\n  const { id, imageUrl, autor, tags, fullsizeUrl } = card;\r\n  const location = useLocation();\r\n  const isFavorite = favorites.some((item) => item.id === id);\r\n\r\n  return (\r\n    <Wrapper imageUrl={imageUrl}>\r\n      {/* eslint-disable-next-line react/prop-types */}\r\n      {location.pathname === '/favorites' && <Tags>{tags.join(', ')}</Tags>}\r\n      <ButtonWrapper>\r\n        <IcoButton icon={Fullscreen} onClick={() => window.open(fullsizeUrl, '_blank')} />\r\n        <IcoButton\r\n          icon={isFavorite ? FilledHeart : Heart}\r\n          onClick={() => {\r\n            if (isFavorite) {\r\n              // eslint-disable-next-line no-alert\r\n              if (window.confirm('Are you sure?')) removeFavorite(id);\r\n            } else addFavorite(card);\r\n          }}\r\n        />\r\n      </ButtonWrapper>\r\n      <BottomBar>{autor}</BottomBar>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nCard.propTypes = {\r\n  card: PropTypes.objectOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      imageUrl: PropTypes.string,\r\n      fullsizeUrl: PropTypes.string,\r\n      autor: PropTypes.string,\r\n      tags: PropTypes.array,\r\n    }),\r\n  ).isRequired,\r\n  favorites: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      imageUrl: PropTypes.string,\r\n      fullsizeUrl: PropTypes.string,\r\n      autor: PropTypes.string,\r\n      tags: PropTypes.array,\r\n    }),\r\n  ),\r\n  addFavorite: PropTypes.func.isRequired,\r\n  removeFavorite: PropTypes.func.isRequired,\r\n};\r\n\r\nCard.defaultProps = {\r\n  favorites: [],\r\n};\r\n\r\nconst mapStateToProps = ({ favorites }) => ({ favorites });\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addFavorite: (newFavorite) => dispatch(addToFavorites(newFavorite)),\r\n  removeFavorite: (imageUrl) => dispatch(removeFromFavorites(imageUrl)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Card);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Card from 'components/molecules/Card/Card';\r\n\r\nconst Wrapper = styled.section`\r\n  max-width: 1400px;\r\n  margin: auto;\r\n  display: grid;\r\n  justify-items: center;\r\n  padding: 30px 20px;\r\n  grid-gap: 20px 30px;\r\n  grid-template-columns: 1fr;\r\n\r\n  @media (min-width: 768px) {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n\r\n  @media (min-width: 1280px) {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n`;\r\n\r\nconst CardGridTemplate = ({ cards }) => (\r\n  <Wrapper>\r\n    {cards.map((card) => (\r\n      <Card key={card.id} card={card} />\r\n    ))}\r\n  </Wrapper>\r\n);\r\n\r\nCardGridTemplate.propTypes = {\r\n  cards: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      imageUrl: PropTypes.string,\r\n      fullsizeUrl: PropTypes.string,\r\n      autor: PropTypes.string,\r\n      tags: PropTypes.array,\r\n    }),\r\n  ),\r\n};\r\n\r\nCardGridTemplate.defaultProps = {\r\n  cards: [],\r\n};\r\nexport default CardGridTemplate;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport CardGridTemplate from 'components/templates/CardGridTemplate';\r\n\r\nconst Keywords = styled.h1`\r\n  max-width: 1400px;\r\n  margin: 30px auto 0;\r\n  padding: 0 15px;\r\n`;\r\n\r\nconst Wallpapers = ({ wallpapers, currentKeywords }) => (\r\n  <>\r\n    <Keywords>\r\n      {currentKeywords.length ? `Current keywords: ${currentKeywords.join(', ')}` : ''}\r\n    </Keywords>\r\n    <CardGridTemplate cards={wallpapers} />\r\n  </>\r\n);\r\n\r\nWallpapers.propTypes = {\r\n  wallpapers: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      imageUrl: PropTypes.string,\r\n      fullsizeUrl: PropTypes.string,\r\n      autor: PropTypes.string,\r\n      tags: PropTypes.array,\r\n    }),\r\n  ),\r\n  currentKeywords: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nWallpapers.defaultProps = {\r\n  wallpapers: [],\r\n  currentKeywords: [],\r\n};\r\n\r\nconst mapStateToProps = ({ wallpapers, currentKeywords }) => ({ wallpapers, currentKeywords });\r\n\r\nexport default connect(mapStateToProps)(Wallpapers);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport CardGridTemplate from 'components/templates/CardGridTemplate';\r\n\r\nconst Favorites = ({ favorites }) => <CardGridTemplate cards={favorites} />;\r\n\r\nconst mapStateToProps = ({ favorites }) => {\r\n  return { favorites };\r\n};\r\n\r\nFavorites.propTypes = {\r\n  favorites: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      imageUrl: PropTypes.string,\r\n      fullsizeUrl: PropTypes.string,\r\n      autor: PropTypes.string,\r\n      tags: PropTypes.array,\r\n    }),\r\n  ),\r\n};\r\n\r\nFavorites.defaultProps = {\r\n  favorites: [],\r\n};\r\nexport default connect(mapStateToProps)(Favorites);\r\n","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from 'store';\r\nimport MainTemplate from 'components/templates/MainTemplate';\r\nimport Wallpapers from 'views/Wallpapers';\r\nimport Favorites from 'views/Favorites';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <MainTemplate>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Wallpapers} />\r\n            <Route path=\"/favorites\" component={Favorites} />\r\n          </Switch>\r\n        </MainTemplate>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'views/Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}